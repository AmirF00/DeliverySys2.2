// hubs.pseudocode

// Constructor
Hubs():
    root = null

// Destructor
Hubs::~Hubs():
    cleanupTree(root)

// Function to add a postal code with an acronym
Hubs.addPC(postalCode, acronym):
    root = insert(root, postalCode, acronym)

// Function to search for a postal code
Hubs::PC* searchPC(postalCode):
    result = root
    while result is not null:
        if postalCode < result.data.postalCode:
            result = result.left
        else if postalCode > result.data.postalCode:
            result = result.right
        else:
            return result.data
    return null

// Function to display all postal codes
Hubs.displayPCs():
    displayPCs(root)

// Function to get the height of a node
Hubs.getHeight(node):
    if node is null:
        return 0
    return node.height

// Function to get the balance factor of a node
Hubs.getBalance(node):
    if node is null:
        return 0
    return getHeight(node.left) - getHeight(node.right)

// Function to rotate a node right
Hubs.rotateRight(y):
    x = y.left
    T2 = x.right
    x.right = y
    y.left = T2
    update heights
    return x

// Function to rotate a node left
Hubs.rotateLeft(x):
    y = x.right
    T2 = y.left
    y.left = x
    x.right = T2
    update heights
    return y

// Function to insert a node in the AVL tree
Hubs.insert(node, postalCode, acronym):
    if node is null:
        newNode = new Node{PC{postalCode, acronym}, null, null, 1}
        return newNode

    if postalCode < node.data.postalCode:
        node.left = insert(node.left, postalCode, acronym)
    else if postalCode > node.data.postalCode:
        node.right = insert(node.right, postalCode, acronym)
    else:
        // Duplicate keys are not allowed
        return node

    // Update height of the current node
    node.height = 1 + max(getHeight(node.left), getHeight(node.right))

    // Get the balance factor
    balance = getBalance(node)

    // Perform rotations based on balance factor
    // Left Left Case
    if balance > 1 and postalCode < node.left.data.postalCode:
        return rotateRight(node)

    // Left Right Case
    if balance > 1 and postalCode > node.left.data.postalCode:
        node.left = rotateLeft(node.left)
        return rotateRight(node)

    // Right Right Case
    if balance < -1 and postalCode > node.right.data.postalCode:
        return rotateLeft(node)

    // Right Left Case
    if balance < -1 and postalCode < node.right.data.postalCode:
        node.right = rotateRight(node.right)
        return rotateLeft(node)

    return node

// Function to find the node with the minimum value in a subtree
Hubs.minValueNode(node):
    current = node
    while current.left is not null:
        current = current.left
    return current

// Function to delete a node with a given postal code
Hubs.deleteNode(root, postalCode):
    if root is null:
        return root

    // Recursive deletion
    if postalCode < root.data.postalCode:
        root.left = deleteNode(root.left, postalCode)
    else if postalCode > root.data.postalCode:
        root.right = deleteNode(root.right, postalCode)
    else:
        // Node to be deleted found

        // One or zero child case
        if (root.left is null) or (root.right is null):
            temp = (root.left is not null) ? root.left : root.right

            // No child case
            if temp is null:
                temp = root
                root = null
            else:
                // One child case
                root = temp

            delete temp
        else:
            // Node with two children
            temp = minValueNode(root.right)
            root.data = temp.data
            root.right = deleteNode(root.right, temp.data.postalCode)

    // If the tree had only one node, then return
    if root is null:
        return root

    // Update height of the current node
    root.height = 1 + max(getHeight(root.left), getHeight(root.right))

    // Get the balance factor
    balance = getBalance(root)

    // Perform rotations based on balance factor
    // Left Left Case
    if balance > 1 and getBalance(root.left) >= 0:
        return rotateRight(root)

    // Left Right Case
    if balance > 1 and getBalance(root.left) < 0:
        root.left = rotateLeft(root.left)
        return rotateRight(root)

    // Right Right Case
    if balance < -1 and getBalance(root.right) <= 0:
        return rotateLeft(root)

    // Right Left Case
    if balance < -1 and getBalance(root.right) > 0:
        root.right = rotateRight(root.right)
        return rotateLeft(root)

    return root

// Function to display all postal codes in-order
Hubs.displayPCs(root):
    if root is not null:
        displayPCs(root.left)
        print "Postal Code: " + root.data.postalCode + ", Acronym: " + root.data.acronym
        displayPCs(root.right)

// Function to clean up the tree in post-order
Hubs.cleanupTree(root):
    if root is not null:
        cleanupTree(root.left)
        cleanupTree(root.right)
        delete root

// Function to get the root of the tree
Hubs.getRoot():
    return root

